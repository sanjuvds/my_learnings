class Users::Devise::RegistrationsController < Devise::RegistrationsController
  prepend_before_filter :require_no_authentication, :only => [ :new, :create, :cancel ]
  prepend_before_filter :authenticate_scope!, :only => [:edit, :update, :destroy]
  #include Devise::Controllers::InternalHelpers
  #DE2549 Swati Ahire 21-02-2014
  before_filter :get_js_css
  # GET /users/change_password
  def change_password    
    @user = User.new     
    @user = current_user
    #US1144 Swati Ahire 06-02-2014: Remove SSO condition
    # validation to check for SSO authentication or Guest or Union Admin and check for university_sign_on
    #if ((!@user.nil? && !@user.id.nil?) && ((@union.shibboleth_sign_on == false && @union.university_sign_on == false) || ((!@user.nil? && !@user.userable_type.nil?) && @user.userable_type == "Guest" || @user.userable_type == "Admin" )))
    #Removed condition to check if user is Admin or Guest in case SSO is turned on      
    if (!@user.nil? && !@user.id.nil?)
      #US1144 Swati Ahire 11-02-2014: Added condition to raise exception if user who doesn't have password, tries accesing Change Password screen by manipulating URL      
      #US1451 [Urvi on 24/12/2014:] :modified the condition to check for blank. Making the condition logically correct.
      if @user.encrypted_password.blank?
        raise ActiveRecord::RecordNotFound
      else
        render :change_password
      end
    else
      redirect_to home_index_path
    end
  end
  
  # POST /users/update_password  
  # added for change password and its validations-US395   
  def update_password
    #To find the current user.
    #Cross union changes to find the union.
    #Mradula [16-07-2013]
    @user = current_user     
    @current_password_value = ''
    @invalid_current_pwd = ''
    @password_value = ''
    @password_confirmation_value = ''
    #if existing password is blank.
    if params[:user][:current_password].blank? 
      @current_password_value = "can't be blank and is invalid"      
    else
      #if existing password is wrong.
      if !@user.valid_password?(params[:user][:current_password])
        @current_password_value = "is invalid"
      end
    end
    #if new password is blank.
    if params[:user][:password].blank? 
      @password_value = "can't be blank"   
    elsif params[:user][:password].size < 6                 
      @password_value = "It should be of minimum 6 characters."    
    end
    #US904 : confirm pwd is removed from page hence all validation are removed
    #Abhishek ON 13/06/2013
    #if confirm password is blank.
    #if params[:user][:password_confirmation].blank?
    #  @password_confirmation_value = "can't be blank"      
      # elsif params[:user][:password_confirmation].size < 6
      # @password_confirmation_value = "It should be of minimum 6 characters."     
   # end
    
    respond_to do |format|     
      #if new and confirm passwords are not blank 
      if (!params[:user][:password].blank? )#and !params[:user][:password_confirmation].blank?)
        if(params[:user][:password].size >= 6 )           
          #if new and confirm passwords are same
          #US904 : confirm pwd is removed from page hence all validation are removed
          #Abhishek ON 13/06/2013
          #US1144 Swati Ahire 07-02-2014: Uncommented condition to check if new and existing passwords are same
          if params[:user][:current_password] != params[:user][:password]
            # function is used to update the changed password             
            if @user.update_with_password(params[:user])
              sign_in @user, :bypass => true               
              format.html { redirect_to my_subscriptions_user_groups_path, notice: 'Your password updated successfully.' }
              format.json { render json: @user, status: :updated, location: @user }
            else
              format.html { redirect_to :action => :change_password , :current_pwd =>  @current_password_value, :invalid_pwd => @invalid_current_pwd, :pwd => @password_value}#, :pwd_confirmation => @password_confirmation_value}
              format.json { render json: @user.errors, status: :unprocessable_entity }              
            end
          #US904 : confirm pwd is removed from page hence all validation are removed
          #Abhishek ON 13/06/2013
          #US1144 Swati Ahire 07-02-2014: Uncommented condition to display new and existing password validation
          else
            format.html { redirect_to :action => :change_password , :current_pwd =>  @current_password_value, :invalid_pwd => @invalid_current_pwd, :pwd => t(:new_existing_pwd_validation), :pwd_confirmation => @password_confirmation_value}
            format.json { render json: @user.errors, status: :unprocessable_entity }
          end 
        else
          #US904 : confirm pwd is removed from page hence params of confirmed pwd is removed
          #Abhishek ON 13/06/2013
          @password_value = "It should be of minimum 6 characters."
          format.html { redirect_to :action => :change_password , :current_pwd =>  @current_password_value, :invalid_pwd => @invalid_current_pwd, :pwd => @password_value}#, :pwd_confirmation => @password_confirmation_value}
          format.json { render json: @user.errors, status: :unprocessable_entity }
        end 
      else
        #US904 : confirm pwd is removed from page hence params of confirmed pwd is removed
        #Abhishek ON 13/06/2013
        format.html { redirect_to :action => :change_password , :current_pwd =>  @current_password_value, :invalid_pwd => @invalid_current_pwd, :pwd => @password_value}#, :pwd_confirmation => @password_confirmation_value}
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end      
    end      
  end  
end
